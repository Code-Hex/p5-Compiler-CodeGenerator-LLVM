; ModuleID = 'gen/runtime_api.c'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.7.0"

%struct._Object = type { i32, %struct._Value }
%struct._Value = type { i64, double, i8*, i8* }
%struct._Array = type { i32, %struct._Object**, i64 }

@.str = private unnamed_addr constant [4 x i8] c"%ld\00", align 1
@.str1 = private unnamed_addr constant [4 x i8] c"%lf\00", align 1
@.str2 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str3 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1

; Function Attrs: nounwind ssp uwtable
define void @print_object(%struct._Object* %o) #0 {
entry:
  %o.addr = alloca %struct._Object*, align 8
  %array = alloca %struct._Array*, align 8
  store %struct._Object* %o, %struct._Object** %o.addr, align 8
  %0 = load %struct._Object** %o.addr, align 8
  %type = getelementptr inbounds %struct._Object* %0, i32 0, i32 0
  %1 = load i32* %type, align 4
  switch i32 %1, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
    i32 2, label %sw.bb4
    i32 3, label %sw.bb7
    i32 6, label %sw.bb9
  ]

sw.bb:                                            ; preds = %entry
  %2 = load %struct._Object** %o.addr, align 8
  %v = getelementptr inbounds %struct._Object* %2, i32 0, i32 1
  %ivalue = getelementptr inbounds %struct._Value* %v, i32 0, i32 0
  %3 = load i64* %ivalue, align 8
  %call = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i64 %3)
  br label %sw.epilog

sw.bb1:                                           ; preds = %entry
  %4 = load %struct._Object** %o.addr, align 8
  %v2 = getelementptr inbounds %struct._Object* %4, i32 0, i32 1
  %dvalue = getelementptr inbounds %struct._Value* %v2, i32 0, i32 1
  %5 = load double* %dvalue, align 8
  %call3 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str1, i32 0, i32 0), double %5)
  br label %sw.epilog

sw.bb4:                                           ; preds = %entry
  %6 = load %struct._Object** %o.addr, align 8
  %v5 = getelementptr inbounds %struct._Object* %6, i32 0, i32 1
  %svalue = getelementptr inbounds %struct._Value* %v5, i32 0, i32 2
  %7 = load i8** %svalue, align 8
  %call6 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str2, i32 0, i32 0), i8* %7)
  br label %sw.epilog

sw.bb7:                                           ; preds = %entry
  %8 = load %struct._Object** %o.addr, align 8
  %v8 = getelementptr inbounds %struct._Object* %8, i32 0, i32 1
  %ovalue = getelementptr inbounds %struct._Value* %v8, i32 0, i32 3
  %9 = load i8** %ovalue, align 8
  %10 = bitcast i8* %9 to %struct._Array*
  store %struct._Array* %10, %struct._Array** %array, align 8
  %11 = load %struct._Array** %array, align 8
  call void @print(%struct._Array* %11)
  br label %sw.epilog

sw.bb9:                                           ; preds = %entry
  %12 = load %struct._Object** %o.addr, align 8
  %v10 = getelementptr inbounds %struct._Object* %12, i32 0, i32 1
  %ovalue11 = getelementptr inbounds %struct._Value* %v10, i32 0, i32 3
  %13 = load i8** %ovalue11, align 8
  %14 = bitcast i8* %13 to %struct._Object*
  call void @print_object(%struct._Object* %14)
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb9, %sw.bb7, %sw.bb4, %sw.bb1, %sw.bb
  ret void
}

declare i32 @printf(i8*, ...) #1

; Function Attrs: nounwind ssp uwtable
define void @print(%struct._Array* %array) #0 {
entry:
  %array.addr = alloca %struct._Array*, align 8
  %size = alloca i64, align 8
  %i = alloca i64, align 8
  %o = alloca %struct._Object*, align 8
  store %struct._Array* %array, %struct._Array** %array.addr, align 8
  %0 = load %struct._Array** %array.addr, align 8
  %size1 = getelementptr inbounds %struct._Array* %0, i32 0, i32 2
  %1 = load i64* %size1, align 8
  store i64 %1, i64* %size, align 8
  store i64 0, i64* %i, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i64* %i, align 8
  %3 = load i64* %size, align 8
  %cmp = icmp ult i64 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i64* %i, align 8
  %5 = load %struct._Array** %array.addr, align 8
  %list = getelementptr inbounds %struct._Array* %5, i32 0, i32 1
  %6 = load %struct._Object*** %list, align 8
  %arrayidx = getelementptr inbounds %struct._Object** %6, i64 %4
  %7 = load %struct._Object** %arrayidx, align 8
  store %struct._Object* %7, %struct._Object** %o, align 8
  %8 = load %struct._Object** %o, align 8
  call void @print_object(%struct._Object* %8)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i64* %i, align 8
  %inc = add i64 %9, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @say(%struct._Array* %array) #0 {
entry:
  %array.addr = alloca %struct._Array*, align 8
  store %struct._Array* %array, %struct._Array** %array.addr, align 8
  %0 = load %struct._Array** %array.addr, align 8
  call void @print(%struct._Array* %0)
  %call = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([2 x i8]* @.str3, i32 0, i32 0))
  ret void
}

attributes #0 = { nounwind ssp uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf"="true" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf"="true" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "unsafe-fp-math"="false" "use-soft-float"="false" }
